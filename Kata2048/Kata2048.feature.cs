// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kata2048
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Kata2048Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Kata2048.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Kata2048", "Wir wollen das Spiel 2048 in der Konsole nachprogrammieren. In dieser\r\nFunktional" +
                    "ität kümmern wir uns um Spielfeldänderungen nach Eingaben", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Kata2048")))
            {
                global::Kata2048.Kata2048Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Nach Start drückt Benutzer nach unten")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Kata2048")]
        public virtual void NachStartDrucktBenutzerNachUnten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nach Start drückt Benutzer nach unten", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table1.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table1.AddRow(new string[] {
                        "0",
                        "2",
                        "0",
                        "2"});
            table1.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table1.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 6
testRunner.Given("das Spield ist vorbelegt mit", ((string)(null)), table1, "Gegeben sei ");
#line 12
testRunner.When("ich die Pfeiltaste \"nach unten\" drücke", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "0",
                        "2",
                        "0",
                        "2"});
#line 13
testRunner.Then("soll das Spielfeld so aussehen", ((string)(null)), table2, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Nach Start drückt Benutzer nach oben")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Kata2048")]
        public virtual void NachStartDrucktBenutzerNachOben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nach Start drückt Benutzer nach oben", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table3.AddRow(new string[] {
                        "0",
                        "2",
                        "0",
                        "2"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 21
testRunner.Given("das Spield ist vorbelegt mit", ((string)(null)), table3, "Gegeben sei ");
#line 27
testRunner.When("ich die Pfeiltaste \"nach oben\" drücke", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table4.AddRow(new string[] {
                        "0",
                        "2",
                        "0",
                        "2"});
            table4.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table4.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table4.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 28
testRunner.Then("soll das Spielfeld so aussehen", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Nach zweiten Zug drückt Benutzer nach unten")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Kata2048")]
        public virtual void NachZweitenZugDrucktBenutzerNachUnten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nach zweiten Zug drückt Benutzer nach unten", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table5.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "0",
                        "2",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "2",
                        "0",
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "0",
                        "0",
                        "2",
                        "0"});
#line 36
testRunner.Given("das Spield ist vorbelegt mit", ((string)(null)), table5, "Gegeben sei ");
#line 42
testRunner.When("ich die Pfeiltaste \"nach unten\" drücke", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sp1",
                        "Sp2",
                        "Sp3",
                        "Sp4"});
            table6.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "2",
                        "2",
                        "2",
                        "0"});
#line 43
testRunner.Then("soll das Spielfeld so aussehen", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
